import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Read the CSV file generated by the benchmark script
df = pd.read_csv('performance_results/comparison.csv')

# Create a bar chart
fig, ax = plt.subplots(figsize=(10, 6))

# Set width of bars
barWidth = 0.35
br1 = np.arange(len(df['Metric']))
br2 = [x + barWidth for x in br1]

# Create bars
ax.bar(br1, df['Original'], width=barWidth, label='Original [code4]', color='blue', alpha=0.7)
ax.bar(br2, df['Optimized'], width=barWidth, label='`memcpy` to copy entire row [code9]', color='green', alpha=0.7)

# Set y-axis range from 0 to 1 as requested
ax.set_ylim(0, 1)

# Add improvement percentage as text
for i, metric in enumerate(df['Metric']):
    improvement = df.loc[i, 'Improvement(%)']
    y_pos = min(0.95, max(df.loc[i, 'Original'], df.loc[i, 'Optimized']) + 0.05)
    ax.text(br1[i] + barWidth/2,
            y_pos,
            f"{improvement:.1f}% improvement",
            ha='center', va='bottom', rotation=0, fontsize=9)

# Add labels and title
ax.set_xlabel('Performance Metric', fontweight='bold')
ax.set_ylabel('Time (seconds)', fontweight='bold')
ax.set_title('Performance Comparison [20 iter]: Original [code7] vs. `memcpy` to copy entire row  [code9]', fontweight='bold')
ax.set_xticks([r + barWidth/2 for r in range(len(df['Metric']))])
ax.set_xticklabels(df['Metric'])

# Add grid for better readability of values
ax.grid(axis='y', linestyle='--', alpha=0.7)

# Add exact values on top of each bar
for i, v in enumerate(df['Original']):
    ax.text(br1[i], v + 0.02, f"{v:.4f}s", ha='center', va='bottom', fontsize=8)

for i, v in enumerate(df['Optimized']):
    ax.text(br2[i], v + 0.02, f"{v:.4f}s", ha='center', va='bottom', fontsize=8)

# Create legend & Show graphic
ax.legend()
plt.tight_layout()
plt.savefig('performance_results/performance_comparison.png', dpi=300)
plt.show()
